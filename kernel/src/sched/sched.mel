import "task.mh";
import "../mm/pmm.mh";
import "../mm/mm.mh";
import "cast.mh";
import "../lib/linkedList.mh";
import "../libc/std.mh";

var GlobID: u64 = 0;
var TaskList: *LinkedList;
var Iterator: *LinkedItem;
var CurrentTask: *Task;

fn SchedSpawn(var Func: *u64): void {
  var Task: *Task = HHalf(PmmAlloc(1));
  Task.ID = GlobID;
  GlobID += 1;
  Task.Ctx.RIP = Func;
  Task.Ctx.RSP = ToU64(HHalf(PmmAlloc(1))) + 4095;
  Task.Ctx.CS = 0x28;
  Task.Ctx.SS = 0x30;
  Task.Ctx.RFlags = 0x202;
  LlNewItem(TaskList, Task);
  Iterator = TaskList.head.next;
}

fn Sched(var Ctx: *Context): void {
  if (CurrentTask != 0) {
    memcpy(&CurrentTask.Ctx, Ctx, 176);
  }
  Iterator = Iterator.next;
  if (Iterator == TaskList.head) {
    Iterator = TaskList.head.next;
  }
  CurrentTask = Iterator.data;
  memcpy(Ctx, &CurrentTask.Ctx, 176);
}

fn SchedRegister(): void {
  IrqInstall(0, Sched);
  CurrentTask = ToPtr(0);
}

fn SchedInit(): void {
  TaskList = LlCreate();
}