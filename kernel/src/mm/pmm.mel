import "../libc/std.mh";
import "memmap.mh";
import "mm.mh";
import "cast.mh";
import "pmm.mh";

var PmStack: *u64;
var PmStackWriteIdx: u64 = 0;
var PmStackReadIdx: u64 = 0;
var PmStackCount: u64 = 0;
var PmFreePages: u64 = 0;
var PmUsedPages: u64 = 0;
var PmTotalPages: u64 = 0;
var PmLastPage: u64 = 0;

fn PmStackPush(var Addr: u64): void {
  PmStack[PmStackWriteIdx] = Addr;
  PmStackWriteIdx += 1;
}

fn PmStackPop(): u64 {
  if (PmStackCount == PmStackReadIdx) {
    printf("Hit limit!\n");
    ret 0;
  }
  PmStackReadIdx += 1;
  ret PmStack[PmStackReadIdx - 1];
}

var [extern] LimineMMap: *LimineMMapResponse;

fn PmInit(): void {
  var Entry: *LimineMMapEntry;
  var PmStackSize: u64 = 0;
  for (var idx: u64 = 0; idx < LimineMMap.EntryCnt; idx += 1) {
    Entry = LimineMMap.Entries[idx];
    if (Entry.Type == 0) {
      PmStackCount += DivRoundUp(Entry.Len, GetPgSize());
    }
  }

  PmStackSize = AlignUp(PmStackCount * 8, GetPgSize());

  for (var i: u64 = 0; i < LimineMMap.EntryCnt; i += 1) {
    Entry = LimineMMap.Entries[i];
    if (Entry.Type == 0 && Entry.Len >= PmStackSize) {
      PmStack = HHalf(Entry.Base);
      memset(PmStack, 0, PmStackSize);
      Entry.Base += PmStackSize;
      Entry.Len -= PmStackSize;
      break;
    }
  }

  for (var i: u64 = 0; i < LimineMMap.EntryCnt; i += 1) {
    Entry = LimineMMap.Entries[i];
    if (Entry.Type == 0) {
      for (var j: u64 = 0; j < Entry.Len; j += GetPgSize()) {
        PmStackPush(Entry.Base + j);
      }
    }
  }

  printf("Pm Initialised.\n");
}

fn PmAlloc(): *u8 {
  var Ptr: u64 = PmStackPop();
  if (!Ptr) {
    printf("Pm: OOM.\n");
    ret <*u8>0;
  }
  ret <*u8>Ptr;
}

fn PmFree(var Ptr: *u8): void {
  PmStackPush(<u64>Ptr);
}