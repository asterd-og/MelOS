import "vmm.mh";
import "pmm.mh";
import "mm.mh";
import "../libc/std.mh";

var VmKernelPM: *PageMap;
var VmCurrentPM: *PageMap;

var [extern] LimineKeAddr: *LimineKeAddrResponse;

var [extern] TextStartLD: char[1];
var [extern] TextEndLD: char[1];

var [extern] RodataStartLD: char[1];
var [extern] RodataEndLD: char[1];

var [extern] DataStartLD: char[1];
var [extern] DataEndLD: char[1];

fn VmInit(): void {
  VmKernelPM = <*PageMap>HHalf(PmAlloc());
  memset(VmKernelPM, 0, GetPgSize());

  VmKernelPM.TopLvl = <*u64>HHalf(PmAlloc());
  memset(VmKernelPM.TopLvl, 0, GetPgSize());

  VmKernelPM.VmaHead = <*VmaRegion>HHalf(PmAlloc());
  memset(VmKernelPM.VmaHead, 0, GetPgSize());

  VmKernelPM.VmaHead.Next = VmKernelPM.VmaHead;
  VmKernelPM.VmaHead.Prev = VmKernelPM.VmaHead;

  var PhysBase: u64 = LimineKeAddr.PhysBase;
  var VirtBase: u64 = LimineKeAddr.VirtBase;

  var TextStart: u64 = AlignDown(<u64>TextStartLD, GetPgSize());
  var TextEnd: u64 = AlignUp(<u64>TextEndLD, GetPgSize());

  var RodataStart: u64 = AlignDown(<u64>RodataStartLD, GetPgSize());
  var RodataEnd: u64 = AlignUp(<u64>RodataEndLD, GetPgSize());

  var DataStart: u64 = AlignDown(<u64>DataStartLD, GetPgSize());
  var DataEnd: u64 = AlignUp(<u64>DataEndLD, GetPgSize());

  // Text section
  for (var Text: u64 = TextStart; Text < TextEnd; Text += GetPgSize())
    VmMap(VmKernelPM, Text, Text - VirtBase + PhysBase, 1);

  // Rodata section
  for (var Rodata: u64 = RodataStart; Rodata < RodataEnd; Rodata += GetPgSize())
    VmMap(VmKernelPM, Rodata, Rodata - VirtBase + PhysBase, 1 | (1 << 63));

  // Data section
  for (var Data: u64 = DataStart; Data < DataEnd; Data += GetPgSize())
    VmMap(VmKernelPM, Data, Data - VirtBase + PhysBase, 1 | 2 | (1 << 63));

  // 4 GB Section
  for (var Gb4: u64 = 0x1000; Gb4 < 0x100000000; Gb4 += GetPgSize()) {
    VmMap(VmKernelPM, Gb4, Gb4, 1 | 2);
    VmMap(VmKernelPM, <u64>HHalf(Gb4), Gb4, 1 | 2 | (1 << 63));
  }
  VmCreateRegion(VmKernelPM, 0x1000, 1, 1);

  VmSwitchPM(VmKernelPM);
  printf("Vm Initialised.\n");
}

fn WriteCR3(var Val: u64): void;

fn VmSwitchPM(var PM: *PageMap): void {
  VmCurrentPM = PM;
  WriteCR3(<u64>LHalf(PM.TopLvl));
}

fn VmNewPM(): *PageMap {
  var PM: *PageMap = <*PageMap>HHalf(PmAlloc());
  memset(PM, 0, GetPgSize());
  PM.TopLvl = <*u64>HHalf(PmAlloc());
  memset(PM.TopLvl, 0, GetPgSize());
  for (var i: int = 256; i < 512; i += 1) {
    PM.TopLvl[i] = VmKernelPM.TopLvl[i];
  }
  ret PM;
}

fn VmGetFlags(var Present: u8, var Writable: u8, var User: u8, var NX: u8): u64 {
  var Flags: u64 = 0;
  if (Present) Flags |= 1;
  if (Writable) Flags |= 2;
  if (User) Flags |= 4;
  if (NX) Flags |= (1 << 63);
  ret Flags;
}

fn PteGetAddr(var Value: u64): u64 {
  ret Value & 0x000ffffffffff000;
}

fn PteGetFlags(var Value: u64): u64 {
  ret Value & ~0x000ffffffffff000;
}

fn VmGetNextLvl(var Level: *u64, var Entry: u64): *u64 {
  if (Level[Entry] & 1) ret HHalf(PteGetAddr(Level[Entry]));
  var PML: *u64 = HHalf(PmAlloc());
  if (!LHalf(PML)) {
    printf("VmGetNextLvl: Unrecoverable error, couldn't allocate enough space.\n");
    ret <*u64>0;
  }
  memset(PML, 0, GetPgSize());
  Level[Entry] = <u64>LHalf(PML) | 1 | 2 | 4;
  ret PML;
}

fn VmMap(var PM: *PageMap, var VAddr: u64, var PAddr: u64, var Flags: u64): void {
  var PML1Entry: u64 = (VAddr >> 12) & 0x1ff;
  var PML2Entry: u64 = (VAddr >> 21) & 0x1ff;
  var PML3Entry: u64 = (VAddr >> 30) & 0x1ff;
  var PML4Entry: u64 = (VAddr >> 39) & 0x1ff;

  var PML3: *u64 = VmGetNextLvl(PM.TopLvl, PML4Entry);
  if (!PML3) {
    ret 0;
  }
  var PML2: *u64 = VmGetNextLvl(PML3, PML3Entry);
  if (!PML2) {
    ret 0;
  }
  var PML1: *u64 = VmGetNextLvl(PML2, PML2Entry);
  if (!PML1) {
    ret 0;
  }

  PML1[PML1Entry] = PAddr | Flags;
}

fn VmGetPhys(var PM: *PageMap, var VAddr: u64): u64 {
  var PML1Entry: u64 = (VAddr >> 12) & 0x1ff;
  var PML2Entry: u64 = (VAddr >> 21) & 0x1ff;
  var PML3Entry: u64 = (VAddr >> 30) & 0x1ff;
  var PML4Entry: u64 = (VAddr >> 39) & 0x1ff;

  var PML3: *u64 = VmGetNextLvl(PM.TopLvl, PML4Entry);
  if (!PML3) {
    ret 0;
  }
  var PML2: *u64 = VmGetNextLvl(PML3, PML3Entry);
  if (!PML2) {
    ret 0;
  }
  var PML1: *u64 = VmGetNextLvl(PML2, PML2Entry);
  if (!PML1) {
    ret 0;
  }
  ret PML1[PML1Entry] & ~0xfff;
}

fn VmGetKePM(): *PageMap {
  ret VmKernelPM;
}

fn VmGetPM(): *PageMap {
  ret VmCurrentPM;
}

fn VmCreateRegion(var PM: *PageMap, var VAddr: u64, var Pages: u64, var Flags: u64): *VmaRegion {
  var Ptr: *u8 = PmAlloc();
  if (!Ptr) {
    printf("VmCreateRegion: Unrecoverable error, couldn't create region.");
    ret <*VmaRegion>0;
  }
  var Region: *VmaRegion = <*VmaRegion>HHalf(<u64>Ptr);
  Region.VAddr = VAddr;
  Region.End = VAddr + (Pages * GetPgSize());
  Region.Pages = Pages;
  Region.Flags = Flags;
  Region.RefCnt = 0;
  Region.Next = PM.VmaHead;
  Region.Prev = PM.VmaHead.Prev;
  PM.VmaHead.Prev.Next = Region;
  PM.VmaHead.Prev = Region;
  ret Region;
}

fn VmInsertAfterRegion(var Prev: *VmaRegion, var VAddr: u64, var Pages: u64, var Flags: u64): *VmaRegion {
  var Region: *VmaRegion = <*VmaRegion>HHalf(PmAlloc());
  if (!LHalf(Region)) {
    printf("VmCreateRegion: Unrecoverable error, couldn't create region.");
    ret <*VmaRegion>0;
  }
  Region.VAddr = VAddr;
  Region.End = VAddr + (Pages * GetPgSize());
  Region.Pages = Pages;
  Region.Flags = Flags;
  Region.RefCnt = 0;
  Region.Next = Prev.Next;
  Region.Prev = Prev;
  Prev.Next.Prev = Region;
  Prev.Next = Region;
  ret Region;
}

fn VmDeleteRegion(var Region: *VmaRegion): void {
  Region.Prev.Next = Region.Next;
  Region.Next.Prev = Region.Prev;
  PmFree(LHalf(Region));
}

fn VmGetRegion(var PM: *PageMap, var VAddr: u64): *VmaRegion {
  for (var Region: *VmaRegion = PM.VmaHead.Next; Region != PM.VmaHead; Region = Region.Next)
    if (Region.VAddr == VAddr)
      ret Region;
  ret <*VmaRegion>0;
}

fn VmAlloc(var PM: *PageMap, var Pages: u64, var Flags: u64): *u8 {
  var VAddr: u64 = PM.VmaHead.Prev.End;
  var Region: *VmaRegion;
  var Found: int = 0;
  for (Region = PM.VmaHead.Next; Region != PM.VmaHead; Region = Region.Next) {
    if (Region.Next.VAddr - Region.End >= (Pages * GetPgSize())) {
      VAddr = Region.End;
      Found = 1;
      Region = VmInsertAfterRegion(Region, VAddr, Pages, Flags);
      break;
    }
  }
  if (!Found) Region = VmCreateRegion(PM, VAddr, Pages, Flags);
  for (var i: u64 = 0; i < Pages; i += 1)
    VmMap(PM, VAddr + (i * GetPgSize()), PmAlloc(), Flags);
  Region.RefCnt += 1;
  ret <*u8>VAddr;
}

fn VmFree(var PM: *PageMap, var VAddr: u64): void {
  var Region: *VmaRegion = VmGetRegion(PM, VAddr);
  if (Region) {
    for (var i: u64 = 0; i < Region.Pages; i += 1) {
      var Page: u64 = VmGetPhys(PM, Region.VAddr + (i * GetPgSize()));
      PmFree(Page);
    }
    VmDeleteRegion(Region);
  }
}